@Online{gouki,
author="Matthew Plant",
title="Embedded Scheme for the Async Rust Ecosystem",
year="2023",
url="https://github.com/maplant/scheme-rs"
}

@Online{steel,
author="Matthew Paras",
title="An embeddable and extensible scheme dialect built in Rust",
year="2020",
url="https://github.com/mattwparas/steel"
}

@InProceedings{cc,
author="Bacon, David F.
and Rajan, V. T.",
editor="Knudsen, J{\o}rgen Lindskov",
title="Concurrent Cycle Collection in Reference Counted Systems",
booktitle="ECOOP 2001 --- Object-Oriented Programming",
year="2001",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="207--235",
abstract="Automatic storage reclamation via reference counting has important advantages, but has always suffered from a major weakness due to its inability to reclaim cyclic data structures.",
isbn="978-3-540-45337-6"
}

@InProceedings{lisptracing,
author="John McCarthy",
title="Recursive functions of symbolic expressions and their computation by machine - I",
year="1960",
booktile="Communications of the ACM",
volume="3",
number="1",
pages="184--195",
publisher="ACM"
}

@Online{rusttracing,
author="Felix S Klock II",
title="GC and Rust Part 2: The Roots of the Problem",
year="2016",
url="https://blog.pnkfx.org/blog/2016/01/01/gc-and-rust-part-2-roots-of-the-problem/",
urldate="2016-01-01"
}

@MastersThesis{rc,
author="Kevin G. Cassidy",
title="The Feasibiliy of Automatic Storage Reclamation with Concurrent Program Execution in a LISP Environment",
year="1985",
school="Naval Postgraduate School"
}

@Book{tags,
author="P.A. Steenkiste",
editor="Peter Lee",
title="Tags and run-time type checking",
booktitle="Topics in Advanced Language Implementation",
pages="3--24",
year="1991",
publisher="The MIT Press",
isbn="978-0262121514"
}

@Online{cancellation,
author="Yoshua Wuyts",
title="Async Cancellation I",
url="https://blog.yoshuawuyts.com/async-cancellation-1",
year="2021",
urldate="2021-11-10"
}

@book{cwc,
author = {Appel, Andrew W.},
title = {Compiling with Continuations},
year = {2007},
isbn = {052103311X},
publisher = {Cambridge University Press},
address = {USA},
abstract = {This book shows how continuation-passing style is used as an intermediate representation to perform optimizations and program transformations. Continuations can be used to compile most programming languages. The method is illustrated in a compiler for the programming language Standard ML. Prior knowledge of ML, however, is not necessary, as the author carefully explains each concept as it arises. This is the first book to show how concepts from the theory of programming languages can be applied to the production of practical optimizing compilers for modern languages like ML. All the details of compiling are covered, including the interface to a runtime system and garbage collector.}
}

@Online{derive,
url="https://doc.rust-lang.org/reference/procedural-macros.html#derive-macros"
}

@Online{orphan,
url="https://doc.rust-lang.org/reference/items/implementations.html#r-items.impl.trait.orphan-rule.intro"
}

@Online{arc,
url="https://doc.rust-lang.org/std/sync/struct.Arc.html"
}

@Online{serde,
url="https://serde.rs/data-model.html"
}

@Online{inventory,
url="https://github.com/dtolnay/inventory"
}

@inproceedings{llvm,
author = {Lattner, Chris and Adve, Vikram},
title = {LLVM: A Compilation Framework for Lifelong Program Analysis \& Transformation},
year = {2004},
isbn = {0769521029},
publisher = {IEEE Computer Society},
address = {USA},
abstract = {This paper describes LLVM (Low Level Virtual Machine),a compiler framework designed to support transparent, lifelongprogram analysis and transformation for arbitrary programs,by providing high-level information to compilertransformations at compile-time, link-time, run-time, and inidle time between runs.LLVM defines a common, low-levelcode representation in Static Single Assignment (SSA) form,with several novel features: a simple, language-independenttype-system that exposes the primitives commonly used toimplement high-level language features; an instruction fortyped address arithmetic; and a simple mechanism that canbe used to implement the exception handling features ofhigh-level languages (and setjmp/longjmp in C) uniformlyand efficiently.The LLVM compiler framework and coderepresentation together provide a combination of key capabilitiesthat are important for practical, lifelong analysis andtransformation of programs.To our knowledge, no existingcompilation approach provides all these capabilities.We describethe design of the LLVM representation and compilerframework, and evaluate the design in three ways: (a) thesize and effectiveness of the representation, including thetype information it provides; (b) compiler performance forseveral interprocedural problems; and (c) illustrative examplesof the benefits LLVM provides for several challengingcompiler problems.},
booktitle = {Proceedings of the International Symposium on Code Generation and Optimization: Feedback-Directed and Runtime Optimization},
pages = {75},
location = {Palo Alto, California},
series = {CGO '04}
}

@Online{cranelift,
url="https://cranelift.dev/"
}

@Online{context,
note="To quote the documentation: ``LLVMContext itself provides no locking guarantees, so you should be careful to have one context per thread.''", 
url="https://llvm.org/doxygen/classllvm_1_1LLVMContext.html#details"
}